"""
Django settings for oauth_ds_w_obligations project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
##from . import jwt_generator
import os
from jwt_app.jwt_generator import generate_jwt
from urllib.parse import urlparse
import requests
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-d!o-c^wvw*s6w*etp$m=8r282#frg4j%5q%h*l!nnq49658m#%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

def get_ngrok_url():
    try:
        response = requests.get("http://ngrok:4040/api/tunnels")
        # Debug: print the response text
        print("Response from ngrok API:", response.text)
        data = response.json()
        tunnels = data.get('tunnels', [])
        if tunnels:
            # For simplicity, use the first tunnel's public_url
            return tunnels[0].get('public_url')
        else:
            print("No tunnels found in the response.")
    except Exception as e:
        print("Error fetching ngrok URL:", e)
    return None


NGROK_URL = get_ngrok_url()
SESSION_COOKIE_DOMAIN = urlparse(NGROK_URL).hostname

CSRF_TRUSTED_ORIGINS = [ NGROK_URL,]

ALLOWED_HOSTS = [
    'localhost',
    SESSION_COOKIE_DOMAIN,
]


# Application definition

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'privacyengproj@gmail.com'
EMAIL_HOST_PASSWORD = 'ckvq pbli becs imfz'



INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'jwt_app',
    'obligations_app',
    'oauth2_provider',
    'custom_scopes_and_policies_app',
    #'django_extensions',
    #'scopes_and_policies_manager'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'auth_server_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'auth_server_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# The directory `collectstatic` will dump into.
# Match this to your Docker volume mount.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#LOGIN_URL = '/admin/login/'
FORCE_SCRIPT_NAME = '/auth'
LOGIN_URL = '/auth/admin/login/'
LOGIN_REDIRECT_URL = '/auth/o/authorize/'



JWT_PRIVATE_KEY = open('auth_server_django/keys/private.pem').read()
JWT_ALGORITHM = 'RS256'

# settings.py

# … your other settings …

# Tells DOT “I’m using the built-in oauth2_provider.Application model”
OAUTH2_PROVIDER_APPLICATION_MODEL = "oauth2_provider.Application"
OAUTH2_PROVIDER = {

    'ACCESS_TOKEN_EXPIRE_SECONDS': 36000,
    'SCOPES': {
        'read': 'Read scope',
        'partial read': 'Partial read scope',
    },
    'POLICY_LEVELS': {
        'average numerical values?': ['none', 'hourly', '8-hourly', 'daily'],
        'blur images?': ['none', 'mild', 'medium', 'heavy'],
        'transform text?': ['none', 'anonymize', 'remove'],
    },
    # Configure DOT to use your custom token generator.
    'DEFAULT_SCOPES': ['read'],
    'ACCESS_TOKEN_GENERATOR' : generate_jwt,
    'PKCE_REQUIRED': False,
    # Make sure consent isn’t auto‑skipped
    'SKIP_CONSENT': False,
    'GRANT_MODEL':    'custom_scopes_and_policies_app.CustomGrant',
    'OAUTH2_VALIDATOR_CLASS':      'custom_scopes_and_policies_app.validators.CustomOAuth2Validator',
}